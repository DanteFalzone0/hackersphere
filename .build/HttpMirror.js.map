{
  "version": 3,
  "sources": ["../HttpMirror.ts"],
  "sourcesContent": ["import fs from \"fs\";\nimport http from \"http\";\n\ninterface GmiError {\n  error: 1,\n  reason: \"malformed GMI text\" | \"no such file or directory\",\n  /** The file that the client asked for */\n  requestedResource: string,\n  /** The gmi file that we tried to find */\n  requestedGmi: string\n};\n\ninterface HtmlText {\n  error: 0,\n  htmlText: string,\n  requestedResource: string,\n  requestedGmi: string\n};\n\nexport default function geminiHttpMirror(\n  geminiStaticDir=\"/home/runner/hackersphere/gemini-static\"\n) {\n  const httpServer = http.createServer((req: any, res: any) => {\n    console.log(\":: Handling HTTP request ::\");\n    const resource = req.url.endsWith(\"/\") ? \"/index.html\" : `${req.url}`;\n    if (resource.includes(\"..\")) {\n      res.writeHead(403, { \"Content-Type\": \"text/html\" });\n      res.end(\"403: Tf you trying to look in a parent directory for?\");\n    } else if (!resource.endsWith(\".html\")) {\n      res.writeHead(404, { \"Content-Type\": \"text/html\" });\n      res.end(\"404: HTTP requests must end with .html\");\n    } else {\n      const gmiResource = `${geminiStaticDir}${resource}`\n        .replaceAll(\".html\", \".gmi\");\n      fs.readFile(\n        gmiResource,\n        (err: any, data: any) => {\n          console.log(`Requested: ${resource}`);\n          if (err) {\n            res.writeHead(404, { \"Content-Type\": \"text/html\" });\n            res.end(\"404: File not found\");\n          } else {\n            console.log(`Read: ${gmiResource}`);\n            const conversionResult = convertGmiToHtml(\n              data!.toString(\"utf-8\"), resource, gmiResource\n            );\n            if (conversionResult.error) {\n              console.log(\"Error: \" + JSON.stringify(\n                conversionResult, null, 2\n              ));\n              res.writeHead(500, { \"Content-Type\": \"text/html\" });\n              res.end(`500: ${conversionResult.reason}`);\n            } else {\n              console.log(`:: Request succeeded at Unix time ${Date.now() / 1000} ::`);\n              res.writeHead(200, { \"Content-Type\": \"text/html\" });\n              res.end(conversionResult.htmlText);\n            }\n          }\n        }\n      ); \n    }\n  });\n  return {\n    http: () => {\n      console.log(\"Starting HTTP server\");\n      return httpServer;\n    }\n  };\n}\n\nfunction convertGmiToHtml(\n  gmiFileContents: string,\n  requestedResource: string,\n  requestedGmi: string\n): HtmlText | GmiError {\n  console.log(`Processing GMI file: ${requestedResource} => ${requestedGmi}`);\n  const lines = gmiFileContents.split(\"\\n\");\n  const escape = (s: string) =>\n    s.replaceAll(\"&\", \"&amp;\")\n      .replaceAll(\"<\", \"&lt;\")\n      .replaceAll(\">\", \"&gt;\")\n      .replaceAll(\"* \", \"\")\n      .replaceAll(\"#\", \"\");\n  let result = `<!DOCTYPE html>\\n<html>\\n<head>\\n<title>${\n    escape(`~/${requestedResource}`.replaceAll(\"//\", \"/\"))\n  }\\n</title>\\n</head>\\n<body>\\n`;\n  let codeMode = false;\n  let listMode = false;\n  for (const line of lines) {\n    if (line.startsWith(\"```\")) {\n      codeMode = !codeMode;\n      if (codeMode) {\n        result += \"<code>\\n\";\n      } else {\n        result += \"</code><br>\\n\";\n      }\n    }\n    if (codeMode) continue;\n    if (listMode && !line.startsWith(\"* \")) {\n      result += \"</ul>\\n\";\n      listMode = false;\n    }\n    if (line.startsWith(\"=> \")) {\n      const [ _, uri, label ] = line.split(' ');\n      try {\n        console.log(\"Rewriting link: \" + uri);\n        result += `<a href=\"${uri}\">${escape(label ?? uri)}</a>\\n`;\n      } catch {\n        return {\n          error: 1,\n          reason: \"malformed GMI text\",\n          requestedResource, requestedGmi\n        };\n      }\n    } else if (line.startsWith(\"* \")) {\n      if (!listMode) {\n        result += \"<ul>\\n\";\n        listMode = true;\n      }\n      result += `<li>${escape(line)}</li>\\n`;\n    } else if (line.startsWith(\"#\")) {\n      const level = line.split(' ')[0].length;\n      result += `<h${level}>${escape(line)}</h${level}>\\n`;\n    } else {\n      result += `<p>${escape(line)}</p>\\n`;\n    }\n  }\n  if (listMode) {\n    result += \"</ul>\\n\";\n    listMode = false;\n  }\n  if (codeMode) {\n    // unterminated monospace block\n    return {\n      error: 1,\n      reason: \"malformed GMI text\",\n      requestedResource, requestedGmi\n    };\n  } else {\n    result += \"</body>\\n</html>\\n\";\n    return {\n      error: 0,\n      htmlText: result,\n      requestedResource, requestedGmi\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": ["http", "fs"]
}
